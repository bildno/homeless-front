import React, { useEffect, useState } from "react";
import "./FriendList.css";
import axios from "axios";

const FriendList = ({ onSelectChannel }) => {
  const token = localStorage.getItem("token");
  const [friends, setFriends] = useState([]); // ÏπúÍµ¨ Î™©Î°ù ÏÉÅÌÉú
  const [isModalOpen, setIsModalOpen] = useState(false); // Î™®Îã¨ ÏÉÅÌÉú
  const [searchInput, setSearchInput] = useState(""); // Í≤ÄÏÉâ ÏûÖÎ†•Í∞í
  const [allUsers, setAllUsers] = useState([]); // Î™®Îì† Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞
  const [filteredUsers, setFilteredUsers] = useState([]); // Ï¥àÍ∏∞Í∞í Îπà Î∞∞Ïó¥
  const [currentPage, setCurrentPage] = useState(1); // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ
  const itemsPerPage = 10; // ÌéòÏù¥ÏßÄÎãπ Ìï≠Î™© Ïàò

  const fetchFriends = async () => {
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/friends-service/api/v1/friends`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
          withCredentials: true,
        }
      );

      if (res.status === 200) {
        const friendsData = res.data.data;
        const friends = friendsData.map((friendsData) => {
          const { friend, hasRefreshToken } = friendsData;
          return {
            id: friend.id,
            name: friend.nickname,
            status: hasRefreshToken === 1 ? "online" : "offline",
          };
        });
        setFriends(friends);
      } else {
        console.error("ÏπúÍµ¨ Î™©Î°ùÏùÑ Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§:", res.status);
      }
    } catch (error) {
      console.error("Ïò§Î•ò Î∞úÏÉù:", error);
    }
  };

  // Ïú†Ï†Ä Ï†ÑÏ≤¥ Ï°∞ÌöåÌï¥ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchAllUsers = async () => {
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/user-service/api/v1/users/all`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (res.status === 200 && Array.isArray(res.data.data)) {
        setAllUsers(res.data.data); // Î™®Îì† Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞Î•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
        setFilteredUsers(res.data.data); // Ï¥àÍ∏∞ ÌïÑÌÑ∞ÎßÅÎêú Îç∞Ïù¥ÌÑ∞ÎèÑ Ï†ÑÏ≤¥ Ïú†Ï†ÄÎ°ú ÏÑ§Ï†ï
      } else {
        console.error("Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§:", res.status);
        setAllUsers([]); // Ïã§Ìå® Ïãú Îπà Î∞∞Ïó¥ ÏÑ§Ï†ï
        setFilteredUsers([]);
      }
    } catch (error) {
      console.error("Ïò§Î•ò Î∞úÏÉù:", error);
      setAllUsers([]); // Ïã§Ìå® Ïãú Îπà Î∞∞Ïó¥ ÏÑ§Ï†ï
      setFilteredUsers([]);
    }
  };
  const handleAddFriend = async (nickname) => {
    try {
      const res = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/friends-service/api/v1/friends`,
        { receiverNickname: nickname }, // ÏÑúÎ≤ÑÏóê Ï†ÑÏÜ°Ìï† Îç∞Ïù¥ÌÑ∞
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      console.log("====================================");
      console.log(nickname);
      console.log("====================================");

      if (res.data.code === 200) {
        alert(`${nickname}ÎãòÏóêÍ≤å ÏπúÍµ¨ Ï∂îÍ∞Ä ÏöîÏ≤≠ÎêòÏóàÏäµÎãàÎã§!`);
        fetchFriends(); // ÏπúÍµ¨ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      } else {
        alert("ÏπúÍµ¨ Ï∂îÍ∞Ä Ïã§Ìå®");
      }
    } catch (error) {
      console.error("ÏπúÍµ¨ Ï∂îÍ∞Ä Ïò§Î•ò:", error);
      alert("ÏπúÍµ¨ Ï∂îÍ∞Ä Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    }
  };

  const handleSearchInputChange = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchInput(query);
    const filtered = allUsers.filter((user) =>
      user.nickname.toLowerCase().includes(query)
    );
    setFilteredUsers(filtered);
    setCurrentPage(1); // Í≤ÄÏÉâ Ïãú ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
  };

  // ÌéòÏù¥ÏßÄ Ïù¥Îèô Ïãú ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredUsers.slice(indexOfFirstItem, indexOfLastItem);

  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
  };

  useEffect(() => {
    fetchFriends();
  }, []);

  useEffect(() => {
    if (isModalOpen) {
      fetchAllUsers();
    }
  }, [isModalOpen]);

  return (
    <div className="friend-list-container">
      <div className="friend-list-header">
        <h3>ÏπúÍµ¨ Î™©Î°ù</h3>
        <div className="friend-header-buttons">
          <button
            className="search-friend-button"
            onClick={() => setIsModalOpen(true)}
          >
            üîç
          </button>
        </div>
        <div className="friend-count">
          Ïò®ÎùºÏù∏ - {friends.filter((f) => f.status === "online").length}
        </div>
      </div>
      <div className="friend-list">
        {friends.map((friend) => (
          <div
            key={friend.id}
            className="friend-item"
            onClick={() => onSelectChannel(friend.id, friend.name)}
          >
            <div className="friend-avatar">
              {friend.name.charAt(0).toUpperCase()}
            </div>
            <div className="friend-info">
              <span className="friend-name">{friend.name}</span>
              <span className={`friend-status ${friend.status}`}>
                {friend.status === "online" ? "Ïò®ÎùºÏù∏" : "Ïò§ÌîÑÎùºÏù∏"}
              </span>
            </div>
          </div>
        ))}
      </div>

      {isModalOpen && (
        <div className="modal-overlay">
          <div className="modal-content">
            <button
              className="modal-close"
              onClick={() => setIsModalOpen(false)}
            >
              &times;
            </button>
            <h3>ÏπúÍµ¨ Í≤ÄÏÉâ</h3>
            <input
              type="text"
              value={searchInput}
              onChange={handleSearchInputChange}
              placeholder="ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            />
            <div className="search-results">
              {currentItems.map((user) => (
                <div key={user.nickname} className="search-result-item">
                  <div className="user-avatar">
                    {user.profileImage ? (
                      <img
                        src={user.profileImage}
                        alt="ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ"
                        className="profile-img"
                      />
                    ) : (
                      <div className="default-avatar">
                        {user.nickname.charAt(0).toUpperCase()}
                      </div>
                    )}
                  </div>
                  <div className="user-info">
                    <span className="user-nickname">{user.nickname}</span>
                  </div>
                  <button
                    className="add-friend-button"
                    onClick={() => handleAddFriend(user.nickname)}
                  >
                    + Ï∂îÍ∞Ä
                  </button>
                </div>
              ))}
            </div>
            <div className="pagination">
              {Array.from(
                { length: Math.ceil(filteredUsers.length / itemsPerPage) },
                (_, i) => (
                  <button
                    key={i}
                    onClick={() => handlePageChange(i + 1)}
                    className={currentPage === i + 1 ? "active" : ""}
                  >
                    {i + 1}
                  </button>
                )
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default FriendList;
